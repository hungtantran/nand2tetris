// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux4Way16(a=x, b[0..15]=false, c[0..15]=false, d[0..15]=false, sel[0]=zx, sel[1]=zx, out=x1);
    Not16(in=x1, out=negatex1);
    Mux4Way16(a=x1, b[0..15]=false, c[0..15]=false, d=negatex1, sel[0]=nx, sel[1]=nx, out=xinput);

    Mux4Way16(a=y, b[0..15]=false, c[0..15]=false, d[0..15]=false, sel[0]=zy, sel[1]=zy, out=y1);
    Not16(in=y1, out=negatey1);
    Mux4Way16(a=y1, b[0..15]=false, c[0..15]=false, d=negatey1, sel[0]=ny, sel[1]=ny, out=yinput);

    Add16(a=xinput, b=yinput, out=xaddy);
    And16(a=xinput, b=yinput, out=xandy);
    Mux4Way16(a=xandy, b[0..15]=false, c[0..15]=false, d=xaddy, sel[0]=f, sel[1]=f, out=fouput);

    Not16(in=fouput, out=negatefouput);
    Mux4Way16(a=fouput, b[0..15]=false, c[0..15]=false, d=negatefouput, sel[0]=no, sel[1]=no, out[0..7]=tmp1);
    Mux4Way16(a=fouput, b[0..15]=false, c[0..15]=false, d=negatefouput, sel[0]=no, sel[1]=no, out[8..14]=tmp2);
    Mux4Way16(a=fouput, b[0..15]=false, c[0..15]=false, d=negatefouput, sel[0]=no, sel[1]=no, out[15]=tmp3);

    And16(a[0..7]=tmp1, a[8..14]=tmp2, a[15]=tmp3, b[0..15]=true, out=out);

    Or8Way(in=tmp1, out=zr1);
    Or8Way(in[0..6]=tmp2, in[7]=tmp3, out=zr2);
    Or(a=zr1, b=zr2, out=zr3);
    Not(in=zr3, out=zr);

    And(a=tmp3, b=true, out=ng);
}